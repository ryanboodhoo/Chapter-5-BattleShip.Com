 CHAPTER 9 - LIFE AND DEATH OF AN OBJECT 10/5/2024 PAGE 235-271

Methods are stacked LIKE PANCAKES

The method at the top of the stack is always running

the heap also known as the GC (Garbage Collector)- where all method and local variables go to live example go(); eat(); drink();

the stack- Where All objects live, for example, duck people, students,

Instance variables are variables declared inside a class but outside the method

Local variables are variables declared inside a method or a parameter

All local variables live on the stack, in the curly braces that relate to the method  where the variables

Object reference variables work just like primitive variables

if the reference is declared as a local variable then it goes on the stack

All objects live in the heap, regardless of whether the reference is a local or instance variable

Java makes space for the instance variables based on the primitive type.

An int needs 32 bits, a long needs 64 bits, etc.

Java doesn't care about the value it just cares about the data type

So it knows how much memory that value is going to take up

The three steps of object declaration and assignment: declare a reference variable, Duck myDuck

create an object new Duck();

and assign the object to the reference =

in all, an object shows looks like this Duck myDuck= newDuck

constructors- has the code that runs when you instantiate an object.

in other words, the code that runs when you type new on a class type

every class has a constructor known as the default constructor

Constructors have no return type unlike methods

A constructor runs before the object can be assigned to a reference

As soon as you provide any kind of constructor the compiler backs off and gives ownership to the user

if you have more than one constructor then the constructors MUST have different argument lists

OVERLOADED constructors mean you have more than one constructor in the class

To run, each constructor must have a different argument list

Instance variables live within the object they belong, to on the heap

If the instance variable is a reference to an object both the reference and the object it refers to are on the heap

A constructor is code that runs when you say NEW on  class type

A constructor must have the same name as the class, and must NOT have a return type

You can use a constructor to initialize the state(i.e. the instance variables) of the object being constructed

If you don't put a constructor in a class, the compiler will put in a default constructor

The default constructor is always a no-args constructor

If you put a constructor - any constructor - in a class the compiler will not build the default constructor

If you want a no-arg constructor, and you've already put in a constructor with arguments, you'll have to build the constructor with no arguments yourself

Always provide a no-arg constructor if you can, to make it easy for programmers to make a working object.

Supply default values

Overloaded constructors mean that you have more than one argument in the class

Overloaded constructors must have different argument lists

You cannot have two constructors with the same argument lists.

An argument list includes the order and/or types of arguments

Instance variables are assigned a default value, even when you don't assign one.

The default values are 0/0.0/false for primitive, and null for references.

All the constructors in an object's inheritance tree must run when you make a new object

This means that every superclass has a constructor and each constructor up the hierarchy runs at the time an object of a subclass is created

NEW starts a constructor chain reaction and even abstract classes have a constructor

Can't say NEW in an abstract class

For an object to be fully formed all the superclass parts of itself must be fully formed and that's why the super constructor must run

When a constructor runs it immediately calls its superclass constructor up the chain until you get to the class Object constructor

Ever constructor can have a call to super(); or this (); but never both

The only right way to call a super constructor is by calling super();

Calling super(); puts that constructor at the top of the stack

an object's life depends on the life of the references it refers to

if the reference is alive the object is on the heap


The difference between life and scope is

life- a local variable is alive as long as its Stack frame is on the Stack until the method completes

Scope-A local variable is in the scope only within the method in which the variable was declared

When its own method calls another, the variable is alive but not in scope until its method resumes

You can only use a Variable only when it's in scope

An object's life has no meaning unless somebody references it

If you can't get to it you can't ask it to do anything and it's just a waste of bits

But if an object is unreachable the GC will find out and throw it away

3 ways to get rid of an object's reference:

the reference goes out of scope, permanently

the reference is assigned to another object

the reference is explicitly set to null
